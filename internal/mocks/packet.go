// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	packet "github.com/gsalomao/akira/packet"
	mock "github.com/stretchr/testify/mock"
)

// MockPacket is an autogenerated mock type for the Packet type
type MockPacket struct {
	mock.Mock
}

type MockPacket_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPacket) EXPECT() *MockPacket_Expecter {
	return &MockPacket_Expecter{mock: &_m.Mock}
}

// Size provides a mock function with given fields:
func (_m *MockPacket) Size() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockPacket_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockPacket_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockPacket_Expecter) Size() *MockPacket_Size_Call {
	return &MockPacket_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockPacket_Size_Call) Run(run func()) *MockPacket_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPacket_Size_Call) Return(_a0 int) *MockPacket_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPacket_Size_Call) RunAndReturn(run func() int) *MockPacket_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *MockPacket) Type() packet.Type {
	ret := _m.Called()

	var r0 packet.Type
	if rf, ok := ret.Get(0).(func() packet.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(packet.Type)
	}

	return r0
}

// MockPacket_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockPacket_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockPacket_Expecter) Type() *MockPacket_Type_Call {
	return &MockPacket_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockPacket_Type_Call) Run(run func()) *MockPacket_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPacket_Type_Call) Return(_a0 packet.Type) *MockPacket_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPacket_Type_Call) RunAndReturn(run func() packet.Type) *MockPacket_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPacket creates a new instance of MockPacket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPacket(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPacket {
	mock := &MockPacket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
