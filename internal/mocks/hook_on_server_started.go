// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	akira "github.com/gsalomao/akira"
	mock "github.com/stretchr/testify/mock"
)

// MockHookOnServerStarted is an autogenerated mock type for the HookOnServerStarted type
type MockHookOnServerStarted struct {
	mock.Mock
}

type MockHookOnServerStarted_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHookOnServerStarted) EXPECT() *MockHookOnServerStarted_Expecter {
	return &MockHookOnServerStarted_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockHookOnServerStarted) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockHookOnServerStarted_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockHookOnServerStarted_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockHookOnServerStarted_Expecter) Name() *MockHookOnServerStarted_Name_Call {
	return &MockHookOnServerStarted_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockHookOnServerStarted_Name_Call) Run(run func()) *MockHookOnServerStarted_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHookOnServerStarted_Name_Call) Return(_a0 string) *MockHookOnServerStarted_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHookOnServerStarted_Name_Call) RunAndReturn(run func() string) *MockHookOnServerStarted_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OnServerStarted provides a mock function with given fields: s
func (_m *MockHookOnServerStarted) OnServerStarted(s *akira.Server) {
	_m.Called(s)
}

// MockHookOnServerStarted_OnServerStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnServerStarted'
type MockHookOnServerStarted_OnServerStarted_Call struct {
	*mock.Call
}

// OnServerStarted is a helper method to define mock.On call
//   - s *akira.Server
func (_e *MockHookOnServerStarted_Expecter) OnServerStarted(s interface{}) *MockHookOnServerStarted_OnServerStarted_Call {
	return &MockHookOnServerStarted_OnServerStarted_Call{Call: _e.mock.On("OnServerStarted", s)}
}

func (_c *MockHookOnServerStarted_OnServerStarted_Call) Run(run func(s *akira.Server)) *MockHookOnServerStarted_OnServerStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*akira.Server))
	})
	return _c
}

func (_c *MockHookOnServerStarted_OnServerStarted_Call) Return() *MockHookOnServerStarted_OnServerStarted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHookOnServerStarted_OnServerStarted_Call) RunAndReturn(run func(*akira.Server)) *MockHookOnServerStarted_OnServerStarted_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHookOnServerStarted creates a new instance of MockHookOnServerStarted. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHookOnServerStarted(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHookOnServerStarted {
	mock := &MockHookOnServerStarted{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
