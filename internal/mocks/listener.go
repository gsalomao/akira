// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	akira "github.com/gsalomao/akira"
	mock "github.com/stretchr/testify/mock"
)

// MockListener is an autogenerated mock type for the Listener type
type MockListener struct {
	mock.Mock
}

type MockListener_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListener) EXPECT() *MockListener_Expecter {
	return &MockListener_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockListener) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockListener_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockListener_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockListener_Expecter) Close() *MockListener_Close_Call {
	return &MockListener_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockListener_Close_Call) Run(run func()) *MockListener_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockListener_Close_Call) Return(_a0 error) *MockListener_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockListener_Close_Call) RunAndReturn(run func() error) *MockListener_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Listen provides a mock function with given fields: f
func (_m *MockListener) Listen(f akira.OnConnectionFunc) error {
	ret := _m.Called(f)

	var r0 error
	if rf, ok := ret.Get(0).(func(akira.OnConnectionFunc) error); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockListener_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type MockListener_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - f akira.OnConnectionFunc
func (_e *MockListener_Expecter) Listen(f interface{}) *MockListener_Listen_Call {
	return &MockListener_Listen_Call{Call: _e.mock.On("Listen", f)}
}

func (_c *MockListener_Listen_Call) Run(run func(f akira.OnConnectionFunc)) *MockListener_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(akira.OnConnectionFunc))
	})
	return _c
}

func (_c *MockListener_Listen_Call) Return(_a0 error) *MockListener_Listen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockListener_Listen_Call) RunAndReturn(run func(akira.OnConnectionFunc) error) *MockListener_Listen_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListener creates a new instance of MockListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListener {
	mock := &MockListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
