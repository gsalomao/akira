// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	akira "github.com/gsalomao/akira"
	mock "github.com/stretchr/testify/mock"
)

// MockOnPacketReceiveHook is an autogenerated mock type for the OnPacketReceiveHook type
type MockOnPacketReceiveHook struct {
	mock.Mock
}

type MockOnPacketReceiveHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOnPacketReceiveHook) EXPECT() *MockOnPacketReceiveHook_Expecter {
	return &MockOnPacketReceiveHook_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockOnPacketReceiveHook) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockOnPacketReceiveHook_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockOnPacketReceiveHook_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockOnPacketReceiveHook_Expecter) Name() *MockOnPacketReceiveHook_Name_Call {
	return &MockOnPacketReceiveHook_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockOnPacketReceiveHook_Name_Call) Run(run func()) *MockOnPacketReceiveHook_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOnPacketReceiveHook_Name_Call) Return(_a0 string) *MockOnPacketReceiveHook_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOnPacketReceiveHook_Name_Call) RunAndReturn(run func() string) *MockOnPacketReceiveHook_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OnPacketReceive provides a mock function with given fields: c
func (_m *MockOnPacketReceiveHook) OnPacketReceive(c *akira.Client) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*akira.Client) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOnPacketReceiveHook_OnPacketReceive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnPacketReceive'
type MockOnPacketReceiveHook_OnPacketReceive_Call struct {
	*mock.Call
}

// OnPacketReceive is a helper method to define mock.On call
//   - c *akira.Client
func (_e *MockOnPacketReceiveHook_Expecter) OnPacketReceive(c interface{}) *MockOnPacketReceiveHook_OnPacketReceive_Call {
	return &MockOnPacketReceiveHook_OnPacketReceive_Call{Call: _e.mock.On("OnPacketReceive", c)}
}

func (_c *MockOnPacketReceiveHook_OnPacketReceive_Call) Run(run func(c *akira.Client)) *MockOnPacketReceiveHook_OnPacketReceive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*akira.Client))
	})
	return _c
}

func (_c *MockOnPacketReceiveHook_OnPacketReceive_Call) Return(_a0 error) *MockOnPacketReceiveHook_OnPacketReceive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOnPacketReceiveHook_OnPacketReceive_Call) RunAndReturn(run func(*akira.Client) error) *MockOnPacketReceiveHook_OnPacketReceive_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOnPacketReceiveHook creates a new instance of MockOnPacketReceiveHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOnPacketReceiveHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOnPacketReceiveHook {
	mock := &MockOnPacketReceiveHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
