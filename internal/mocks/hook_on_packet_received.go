// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"github.com/gsalomao/akira"
	"github.com/stretchr/testify/mock"
)

// MockHookOnPacketReceived is an autogenerated mock type for the HookOnPacketReceived type
type MockHookOnPacketReceived struct {
	mock.Mock
}

type MockHookOnPacketReceived_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHookOnPacketReceived) EXPECT() *MockHookOnPacketReceived_Expecter {
	return &MockHookOnPacketReceived_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockHookOnPacketReceived) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockHookOnPacketReceived_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockHookOnPacketReceived_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockHookOnPacketReceived_Expecter) Name() *MockHookOnPacketReceived_Name_Call {
	return &MockHookOnPacketReceived_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockHookOnPacketReceived_Name_Call) Run(run func()) *MockHookOnPacketReceived_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHookOnPacketReceived_Name_Call) Return(_a0 string) *MockHookOnPacketReceived_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHookOnPacketReceived_Name_Call) RunAndReturn(run func() string) *MockHookOnPacketReceived_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OnPacketReceived provides a mock function with given fields: c, p
func (_m *MockHookOnPacketReceived) OnPacketReceived(c *akira.Client, p akira.Packet) error {
	ret := _m.Called(c, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*akira.Client, akira.Packet) error); ok {
		r0 = rf(c, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHookOnPacketReceived_OnPacketReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnPacketReceived'
type MockHookOnPacketReceived_OnPacketReceived_Call struct {
	*mock.Call
}

// OnPacketReceived is a helper method to define mock.On call
//   - c *akira.Client
//   - p akira.Packet
func (_e *MockHookOnPacketReceived_Expecter) OnPacketReceived(c interface{}, p interface{}) *MockHookOnPacketReceived_OnPacketReceived_Call {
	return &MockHookOnPacketReceived_OnPacketReceived_Call{Call: _e.mock.On("OnPacketReceived", c, p)}
}

func (_c *MockHookOnPacketReceived_OnPacketReceived_Call) Run(run func(c *akira.Client, p akira.Packet)) *MockHookOnPacketReceived_OnPacketReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*akira.Client), args[1].(akira.Packet))
	})
	return _c
}

func (_c *MockHookOnPacketReceived_OnPacketReceived_Call) Return(_a0 error) *MockHookOnPacketReceived_OnPacketReceived_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHookOnPacketReceived_OnPacketReceived_Call) RunAndReturn(run func(*akira.Client, akira.Packet) error) *MockHookOnPacketReceived_OnPacketReceived_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHookOnPacketReceived creates a new instance of MockHookOnPacketReceived. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHookOnPacketReceived(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHookOnPacketReceived {
	mock := &MockHookOnPacketReceived{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
