// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	akira "github.com/gsalomao/akira"
	mock "github.com/stretchr/testify/mock"

	packet "github.com/gsalomao/akira/packet"
)

// MockOnConnectErrorHook is an autogenerated mock type for the OnConnectErrorHook type
type MockOnConnectErrorHook struct {
	mock.Mock
}

type MockOnConnectErrorHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOnConnectErrorHook) EXPECT() *MockOnConnectErrorHook_Expecter {
	return &MockOnConnectErrorHook_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockOnConnectErrorHook) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockOnConnectErrorHook_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockOnConnectErrorHook_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockOnConnectErrorHook_Expecter) Name() *MockOnConnectErrorHook_Name_Call {
	return &MockOnConnectErrorHook_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockOnConnectErrorHook_Name_Call) Run(run func()) *MockOnConnectErrorHook_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOnConnectErrorHook_Name_Call) Return(_a0 string) *MockOnConnectErrorHook_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOnConnectErrorHook_Name_Call) RunAndReturn(run func() string) *MockOnConnectErrorHook_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OnConnectError provides a mock function with given fields: c, p, err
func (_m *MockOnConnectErrorHook) OnConnectError(c *akira.Client, p *packet.Connect, err error) {
	_m.Called(c, p, err)
}

// MockOnConnectErrorHook_OnConnectError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnConnectError'
type MockOnConnectErrorHook_OnConnectError_Call struct {
	*mock.Call
}

// OnConnectError is a helper method to define mock.On call
//   - c *akira.Client
//   - p *packet.Connect
//   - err error
func (_e *MockOnConnectErrorHook_Expecter) OnConnectError(c interface{}, p interface{}, err interface{}) *MockOnConnectErrorHook_OnConnectError_Call {
	return &MockOnConnectErrorHook_OnConnectError_Call{Call: _e.mock.On("OnConnectError", c, p, err)}
}

func (_c *MockOnConnectErrorHook_OnConnectError_Call) Run(run func(c *akira.Client, p *packet.Connect, err error)) *MockOnConnectErrorHook_OnConnectError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*akira.Client), args[1].(*packet.Connect), args[2].(error))
	})
	return _c
}

func (_c *MockOnConnectErrorHook_OnConnectError_Call) Return() *MockOnConnectErrorHook_OnConnectError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOnConnectErrorHook_OnConnectError_Call) RunAndReturn(run func(*akira.Client, *packet.Connect, error)) *MockOnConnectErrorHook_OnConnectError_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOnConnectErrorHook creates a new instance of MockOnConnectErrorHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOnConnectErrorHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOnConnectErrorHook {
	mock := &MockOnConnectErrorHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
