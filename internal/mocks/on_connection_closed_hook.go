// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	akira "github.com/gsalomao/akira"
	mock "github.com/stretchr/testify/mock"
)

// MockOnConnectionClosedHook is an autogenerated mock type for the OnConnectionClosedHook type
type MockOnConnectionClosedHook struct {
	mock.Mock
}

type MockOnConnectionClosedHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOnConnectionClosedHook) EXPECT() *MockOnConnectionClosedHook_Expecter {
	return &MockOnConnectionClosedHook_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockOnConnectionClosedHook) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockOnConnectionClosedHook_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockOnConnectionClosedHook_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockOnConnectionClosedHook_Expecter) Name() *MockOnConnectionClosedHook_Name_Call {
	return &MockOnConnectionClosedHook_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockOnConnectionClosedHook_Name_Call) Run(run func()) *MockOnConnectionClosedHook_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOnConnectionClosedHook_Name_Call) Return(_a0 string) *MockOnConnectionClosedHook_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOnConnectionClosedHook_Name_Call) RunAndReturn(run func() string) *MockOnConnectionClosedHook_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OnConnectionClosed provides a mock function with given fields: s, l, err
func (_m *MockOnConnectionClosedHook) OnConnectionClosed(s *akira.Server, l akira.Listener, err error) {
	_m.Called(s, l, err)
}

// MockOnConnectionClosedHook_OnConnectionClosed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnConnectionClosed'
type MockOnConnectionClosedHook_OnConnectionClosed_Call struct {
	*mock.Call
}

// OnConnectionClosed is a helper method to define mock.On call
//   - s *akira.Server
//   - l akira.Listener
//   - err error
func (_e *MockOnConnectionClosedHook_Expecter) OnConnectionClosed(s interface{}, l interface{}, err interface{}) *MockOnConnectionClosedHook_OnConnectionClosed_Call {
	return &MockOnConnectionClosedHook_OnConnectionClosed_Call{Call: _e.mock.On("OnConnectionClosed", s, l, err)}
}

func (_c *MockOnConnectionClosedHook_OnConnectionClosed_Call) Run(run func(s *akira.Server, l akira.Listener, err error)) *MockOnConnectionClosedHook_OnConnectionClosed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*akira.Server), args[1].(akira.Listener), args[2].(error))
	})
	return _c
}

func (_c *MockOnConnectionClosedHook_OnConnectionClosed_Call) Return() *MockOnConnectionClosedHook_OnConnectionClosed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOnConnectionClosedHook_OnConnectionClosed_Call) RunAndReturn(run func(*akira.Server, akira.Listener, error)) *MockOnConnectionClosedHook_OnConnectionClosed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOnConnectionClosedHook creates a new instance of MockOnConnectionClosedHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOnConnectionClosedHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOnConnectionClosedHook {
	mock := &MockOnConnectionClosedHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
