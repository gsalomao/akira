// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	akira "github.com/gsalomao/akira"
	mock "github.com/stretchr/testify/mock"
)

// MockSessionStore is an autogenerated mock type for the SessionStore type
type MockSessionStore struct {
	mock.Mock
}

type MockSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionStore) EXPECT() *MockSessionStore_Expecter {
	return &MockSessionStore_Expecter{mock: &_m.Mock}
}

// DeleteSession provides a mock function with given fields: clientID
func (_m *MockSessionStore) DeleteSession(clientID []byte) error {
	ret := _m.Called(clientID)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionStore_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type MockSessionStore_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - clientID []byte
func (_e *MockSessionStore_Expecter) DeleteSession(clientID interface{}) *MockSessionStore_DeleteSession_Call {
	return &MockSessionStore_DeleteSession_Call{Call: _e.mock.On("DeleteSession", clientID)}
}

func (_c *MockSessionStore_DeleteSession_Call) Run(run func(clientID []byte)) *MockSessionStore_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockSessionStore_DeleteSession_Call) Return(_a0 error) *MockSessionStore_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionStore_DeleteSession_Call) RunAndReturn(run func([]byte) error) *MockSessionStore_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// ReadSession provides a mock function with given fields: clientID, s
func (_m *MockSessionStore) ReadSession(clientID []byte, s *akira.Session) error {
	ret := _m.Called(clientID, s)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, *akira.Session) error); ok {
		r0 = rf(clientID, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionStore_ReadSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadSession'
type MockSessionStore_ReadSession_Call struct {
	*mock.Call
}

// ReadSession is a helper method to define mock.On call
//   - clientID []byte
//   - s *akira.Session
func (_e *MockSessionStore_Expecter) ReadSession(clientID interface{}, s interface{}) *MockSessionStore_ReadSession_Call {
	return &MockSessionStore_ReadSession_Call{Call: _e.mock.On("ReadSession", clientID, s)}
}

func (_c *MockSessionStore_ReadSession_Call) Run(run func(clientID []byte, s *akira.Session)) *MockSessionStore_ReadSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(*akira.Session))
	})
	return _c
}

func (_c *MockSessionStore_ReadSession_Call) Return(_a0 error) *MockSessionStore_ReadSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionStore_ReadSession_Call) RunAndReturn(run func([]byte, *akira.Session) error) *MockSessionStore_ReadSession_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSession provides a mock function with given fields: clientID, s
func (_m *MockSessionStore) SaveSession(clientID []byte, s *akira.Session) error {
	ret := _m.Called(clientID, s)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, *akira.Session) error); ok {
		r0 = rf(clientID, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionStore_SaveSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSession'
type MockSessionStore_SaveSession_Call struct {
	*mock.Call
}

// SaveSession is a helper method to define mock.On call
//   - clientID []byte
//   - s *akira.Session
func (_e *MockSessionStore_Expecter) SaveSession(clientID interface{}, s interface{}) *MockSessionStore_SaveSession_Call {
	return &MockSessionStore_SaveSession_Call{Call: _e.mock.On("SaveSession", clientID, s)}
}

func (_c *MockSessionStore_SaveSession_Call) Run(run func(clientID []byte, s *akira.Session)) *MockSessionStore_SaveSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(*akira.Session))
	})
	return _c
}

func (_c *MockSessionStore_SaveSession_Call) Return(_a0 error) *MockSessionStore_SaveSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionStore_SaveSession_Call) RunAndReturn(run func([]byte, *akira.Session) error) *MockSessionStore_SaveSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionStore creates a new instance of MockSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionStore {
	mock := &MockSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
