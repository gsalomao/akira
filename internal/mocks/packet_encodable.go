// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	packet "github.com/gsalomao/akira/packet"
	mock "github.com/stretchr/testify/mock"
)

// MockPacketEncodable is an autogenerated mock type for the PacketEncodable type
type MockPacketEncodable struct {
	mock.Mock
}

type MockPacketEncodable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPacketEncodable) EXPECT() *MockPacketEncodable_Expecter {
	return &MockPacketEncodable_Expecter{mock: &_m.Mock}
}

// Encode provides a mock function with given fields: buf
func (_m *MockPacketEncodable) Encode(buf []byte) (int, error) {
	ret := _m.Called(buf)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(buf)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(buf)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(buf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPacketEncodable_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockPacketEncodable_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - buf []byte
func (_e *MockPacketEncodable_Expecter) Encode(buf interface{}) *MockPacketEncodable_Encode_Call {
	return &MockPacketEncodable_Encode_Call{Call: _e.mock.On("Encode", buf)}
}

func (_c *MockPacketEncodable_Encode_Call) Run(run func(buf []byte)) *MockPacketEncodable_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockPacketEncodable_Encode_Call) Return(n int, err error) *MockPacketEncodable_Encode_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockPacketEncodable_Encode_Call) RunAndReturn(run func([]byte) (int, error)) *MockPacketEncodable_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with given fields:
func (_m *MockPacketEncodable) Size() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockPacketEncodable_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockPacketEncodable_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockPacketEncodable_Expecter) Size() *MockPacketEncodable_Size_Call {
	return &MockPacketEncodable_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockPacketEncodable_Size_Call) Run(run func()) *MockPacketEncodable_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPacketEncodable_Size_Call) Return(_a0 int) *MockPacketEncodable_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPacketEncodable_Size_Call) RunAndReturn(run func() int) *MockPacketEncodable_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *MockPacketEncodable) Type() packet.Type {
	ret := _m.Called()

	var r0 packet.Type
	if rf, ok := ret.Get(0).(func() packet.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(packet.Type)
	}

	return r0
}

// MockPacketEncodable_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockPacketEncodable_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockPacketEncodable_Expecter) Type() *MockPacketEncodable_Type_Call {
	return &MockPacketEncodable_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockPacketEncodable_Type_Call) Run(run func()) *MockPacketEncodable_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPacketEncodable_Type_Call) Return(_a0 packet.Type) *MockPacketEncodable_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPacketEncodable_Type_Call) RunAndReturn(run func() packet.Type) *MockPacketEncodable_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPacketEncodable creates a new instance of MockPacketEncodable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPacketEncodable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPacketEncodable {
	mock := &MockPacketEncodable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
