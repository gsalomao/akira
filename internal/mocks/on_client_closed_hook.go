// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	akira "github.com/gsalomao/akira"
	mock "github.com/stretchr/testify/mock"
)

// MockOnClientClosedHook is an autogenerated mock type for the OnClientClosedHook type
type MockOnClientClosedHook struct {
	mock.Mock
}

type MockOnClientClosedHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOnClientClosedHook) EXPECT() *MockOnClientClosedHook_Expecter {
	return &MockOnClientClosedHook_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockOnClientClosedHook) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockOnClientClosedHook_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockOnClientClosedHook_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockOnClientClosedHook_Expecter) Name() *MockOnClientClosedHook_Name_Call {
	return &MockOnClientClosedHook_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockOnClientClosedHook_Name_Call) Run(run func()) *MockOnClientClosedHook_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOnClientClosedHook_Name_Call) Return(_a0 string) *MockOnClientClosedHook_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOnClientClosedHook_Name_Call) RunAndReturn(run func() string) *MockOnClientClosedHook_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OnClientClosed provides a mock function with given fields: s, c, err
func (_m *MockOnClientClosedHook) OnClientClosed(s *akira.Server, c *akira.Client, err error) {
	_m.Called(s, c, err)
}

// MockOnClientClosedHook_OnClientClosed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnClientClosed'
type MockOnClientClosedHook_OnClientClosed_Call struct {
	*mock.Call
}

// OnClientClosed is a helper method to define mock.On call
//   - s *akira.Server
//   - c *akira.Client
//   - err error
func (_e *MockOnClientClosedHook_Expecter) OnClientClosed(s interface{}, c interface{}, err interface{}) *MockOnClientClosedHook_OnClientClosed_Call {
	return &MockOnClientClosedHook_OnClientClosed_Call{Call: _e.mock.On("OnClientClosed", s, c, err)}
}

func (_c *MockOnClientClosedHook_OnClientClosed_Call) Run(run func(s *akira.Server, c *akira.Client, err error)) *MockOnClientClosedHook_OnClientClosed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*akira.Server), args[1].(*akira.Client), args[2].(error))
	})
	return _c
}

func (_c *MockOnClientClosedHook_OnClientClosed_Call) Return() *MockOnClientClosedHook_OnClientClosed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOnClientClosedHook_OnClientClosed_Call) RunAndReturn(run func(*akira.Server, *akira.Client, error)) *MockOnClientClosedHook_OnClientClosed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOnClientClosedHook creates a new instance of MockOnClientClosedHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOnClientClosedHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOnClientClosedHook {
	mock := &MockOnClientClosedHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
