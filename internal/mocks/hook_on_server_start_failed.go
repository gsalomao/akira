// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	akira "github.com/gsalomao/akira"
	mock "github.com/stretchr/testify/mock"
)

// MockHookOnServerStartFailed is an autogenerated mock type for the HookOnServerStartFailed type
type MockHookOnServerStartFailed struct {
	mock.Mock
}

type MockHookOnServerStartFailed_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHookOnServerStartFailed) EXPECT() *MockHookOnServerStartFailed_Expecter {
	return &MockHookOnServerStartFailed_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockHookOnServerStartFailed) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockHookOnServerStartFailed_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockHookOnServerStartFailed_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockHookOnServerStartFailed_Expecter) Name() *MockHookOnServerStartFailed_Name_Call {
	return &MockHookOnServerStartFailed_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockHookOnServerStartFailed_Name_Call) Run(run func()) *MockHookOnServerStartFailed_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHookOnServerStartFailed_Name_Call) Return(_a0 string) *MockHookOnServerStartFailed_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHookOnServerStartFailed_Name_Call) RunAndReturn(run func() string) *MockHookOnServerStartFailed_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OnServerStartFailed provides a mock function with given fields: s, err
func (_m *MockHookOnServerStartFailed) OnServerStartFailed(s *akira.Server, err error) {
	_m.Called(s, err)
}

// MockHookOnServerStartFailed_OnServerStartFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnServerStartFailed'
type MockHookOnServerStartFailed_OnServerStartFailed_Call struct {
	*mock.Call
}

// OnServerStartFailed is a helper method to define mock.On call
//   - s *akira.Server
//   - err error
func (_e *MockHookOnServerStartFailed_Expecter) OnServerStartFailed(s interface{}, err interface{}) *MockHookOnServerStartFailed_OnServerStartFailed_Call {
	return &MockHookOnServerStartFailed_OnServerStartFailed_Call{Call: _e.mock.On("OnServerStartFailed", s, err)}
}

func (_c *MockHookOnServerStartFailed_OnServerStartFailed_Call) Run(run func(s *akira.Server, err error)) *MockHookOnServerStartFailed_OnServerStartFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*akira.Server), args[1].(error))
	})
	return _c
}

func (_c *MockHookOnServerStartFailed_OnServerStartFailed_Call) Return() *MockHookOnServerStartFailed_OnServerStartFailed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHookOnServerStartFailed_OnServerStartFailed_Call) RunAndReturn(run func(*akira.Server, error)) *MockHookOnServerStartFailed_OnServerStartFailed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHookOnServerStartFailed creates a new instance of MockHookOnServerStartFailed. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHookOnServerStartFailed(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHookOnServerStartFailed {
	mock := &MockHookOnServerStartFailed{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
