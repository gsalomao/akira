// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	akira "github.com/gsalomao/akira"
	mock "github.com/stretchr/testify/mock"
)

// MockOnClientOpenHook is an autogenerated mock type for the OnClientOpenHook type
type MockOnClientOpenHook struct {
	mock.Mock
}

type MockOnClientOpenHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOnClientOpenHook) EXPECT() *MockOnClientOpenHook_Expecter {
	return &MockOnClientOpenHook_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockOnClientOpenHook) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockOnClientOpenHook_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockOnClientOpenHook_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockOnClientOpenHook_Expecter) Name() *MockOnClientOpenHook_Name_Call {
	return &MockOnClientOpenHook_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockOnClientOpenHook_Name_Call) Run(run func()) *MockOnClientOpenHook_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOnClientOpenHook_Name_Call) Return(_a0 string) *MockOnClientOpenHook_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOnClientOpenHook_Name_Call) RunAndReturn(run func() string) *MockOnClientOpenHook_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OnClientOpen provides a mock function with given fields: s, c
func (_m *MockOnClientOpenHook) OnClientOpen(s *akira.Server, c *akira.Client) error {
	ret := _m.Called(s, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*akira.Server, *akira.Client) error); ok {
		r0 = rf(s, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOnClientOpenHook_OnClientOpen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnClientOpen'
type MockOnClientOpenHook_OnClientOpen_Call struct {
	*mock.Call
}

// OnClientOpen is a helper method to define mock.On call
//   - s *akira.Server
//   - c *akira.Client
func (_e *MockOnClientOpenHook_Expecter) OnClientOpen(s interface{}, c interface{}) *MockOnClientOpenHook_OnClientOpen_Call {
	return &MockOnClientOpenHook_OnClientOpen_Call{Call: _e.mock.On("OnClientOpen", s, c)}
}

func (_c *MockOnClientOpenHook_OnClientOpen_Call) Run(run func(s *akira.Server, c *akira.Client)) *MockOnClientOpenHook_OnClientOpen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*akira.Server), args[1].(*akira.Client))
	})
	return _c
}

func (_c *MockOnClientOpenHook_OnClientOpen_Call) Return(_a0 error) *MockOnClientOpenHook_OnClientOpen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOnClientOpenHook_OnClientOpen_Call) RunAndReturn(run func(*akira.Server, *akira.Client) error) *MockOnClientOpenHook_OnClientOpen_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOnClientOpenHook creates a new instance of MockOnClientOpenHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOnClientOpenHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOnClientOpenHook {
	mock := &MockOnClientOpenHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
