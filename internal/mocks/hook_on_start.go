// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"github.com/gsalomao/akira"
	"github.com/stretchr/testify/mock"
)

// MockHookOnStart is an autogenerated mock type for the HookOnStart type
type MockHookOnStart struct {
	mock.Mock
}

type MockHookOnStart_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHookOnStart) EXPECT() *MockHookOnStart_Expecter {
	return &MockHookOnStart_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *MockHookOnStart) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockHookOnStart_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockHookOnStart_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockHookOnStart_Expecter) Name() *MockHookOnStart_Name_Call {
	return &MockHookOnStart_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockHookOnStart_Name_Call) Run(run func()) *MockHookOnStart_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHookOnStart_Name_Call) Return(_a0 string) *MockHookOnStart_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHookOnStart_Name_Call) RunAndReturn(run func() string) *MockHookOnStart_Name_Call {
	_c.Call.Return(run)
	return _c
}

// OnStart provides a mock function with given fields: s
func (_m *MockHookOnStart) OnStart(s *akira.Server) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(*akira.Server) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHookOnStart_OnStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnStart'
type MockHookOnStart_OnStart_Call struct {
	*mock.Call
}

// OnStart is a helper method to define mock.On call
//   - s *akira.Server
func (_e *MockHookOnStart_Expecter) OnStart(s interface{}) *MockHookOnStart_OnStart_Call {
	return &MockHookOnStart_OnStart_Call{Call: _e.mock.On("OnStart", s)}
}

func (_c *MockHookOnStart_OnStart_Call) Run(run func(s *akira.Server)) *MockHookOnStart_OnStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*akira.Server))
	})
	return _c
}

func (_c *MockHookOnStart_OnStart_Call) Return(_a0 error) *MockHookOnStart_OnStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHookOnStart_OnStart_Call) RunAndReturn(run func(*akira.Server) error) *MockHookOnStart_OnStart_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHookOnStart creates a new instance of MockHookOnStart. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHookOnStart(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHookOnStart {
	mock := &MockHookOnStart{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
